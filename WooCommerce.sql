- =====================================================================
-- Select and Store the ID of an Existing Product
-- =====================================================================

SET @selected_product_id = (
    SELECT ID
    FROM wp_posts
    WHERE post_type = 'product'
    ORDER BY ID DESC
    LIMIT 1
);


-- =====================================================================
--  1: Retrieve a list of all products.
--  This selects the ID, title, and status of all posts classified as 'product'.
-- =====================================================================

SELECT
    ID,
    post_title,
    post_status
FROM
    wp_posts
WHERE
    post_type = 'product';

-- =====================================================================
--  2: Retrieve the details of a specific product by its ID.
-- IMPORTANT: Requires @selected_product_id
-- =====================================================================
SELECT
    p.ID,
    p.post_title,
    p.post_content,
    p.post_status,
    p.post_date,
    pm_price.meta_value AS price,
    pm_sku.meta_value AS sku,
    pm_stock.meta_value AS stock_quantity
FROM
    wp_posts AS p
LEFT JOIN
    wp_postmeta AS pm_price ON p.ID = pm_price.post_id AND pm_price.meta_key = '_price'
LEFT JOIN
    wp_postmeta AS pm_sku ON p.ID = pm_sku.post_id AND pm_sku.meta_key = '_sku'
LEFT JOIN
    wp_postmeta AS pm_stock ON p.ID = pm_stock.post_id AND pm_stock.meta_key = '_stock'
WHERE
    p.ID = @selected_product_id
    AND p.post_type = 'product';

-- =====================================================================
--  3: Retrieve the total number of products.
--  Counts all entries with a post_type of 'product'.
-- =====================================================================
SELECT
    COUNT(ID) AS total_products
FROM
    wp_posts
WHERE
    post_type = 'product';

-- =====================================================================
--  4: Retrieve the average price of all products.
--  Calculates the average of the '_price' meta_value for all products.
-- =====================================================================
SELECT
    AVG(CAST(pm.meta_value AS DECIMAL(10, 2))) AS average_product_price
FROM
    wp_posts AS p
INNER JOIN
    wp_postmeta AS pm ON p.ID = pm.post_id
WHERE
    p.post_type = 'product'
    AND pm.meta_key = '_price'
    AND pm.meta_value REGEXP '^[0-9]+(\\.[0-9]+)?$';

-- =====================================================================
--  5: Retrieve the products sorted by their price in descending order.
--  Lists products from highest price to lowest.
-- =====================================================================
SELECT
    p.ID,
    p.post_title,
    CAST(pm.meta_value AS DECIMAL(10, 2)) AS price
FROM
    wp_posts AS p
INNER JOIN
    wp_postmeta AS pm ON p.ID = pm.post_id
WHERE
    p.post_type = 'product'
    AND pm.meta_key = '_price'
    AND pm.meta_value REGEXP '^[0-9]+(\\.[0-9]+)?$'
ORDER BY
    price DESC;

-- =====================================================================
--  6: Update the price of a specific product.
-- IMPORTANT: Requires @selected_product_id
-- =====================================================================
UPDATE
    wp_postmeta
SET
    meta_value = '1.99'
WHERE
    post_id = @selected_product_id
    AND meta_key = '_price';

-- =====================================================================
--  7: Delete a product from the database.
-- IMPORTANT: Requires @selected_product_id
-- =====================================================================
DELETE FROM
    wp_posts
WHERE
    ID = @selected_product_id
    AND post_type = 'product';

DELETE FROM
    wp_postmeta
WHERE
    post_id = @selected_product_id;

DELETE FROM
    wp_term_relationships
WHERE
    object_id = @selected_product_id;

-- =====================================================================
--  8: Retrieve the list of customers who have placed orders.
--  Identifies users linked to product posts.
-- =====================================================================
SELECT DISTINCT
    cl.customer_id,
    cl.email AS user_email
FROM
    wp_wc_customer_lookup cl
JOIN
    wp_wc_orders o ON (cl.user_id = o.customer_id AND cl.user_id IS NOT NULL) -- Prioritize linking by WordPress user ID for registered users
                 OR (cl.user_id IS NULL AND cl.email = o.billing_email) -- Fallback to email for guest users
WHERE
    o.status IN ('wc-processing', 'wc-completed', 'wc-on-hold', 'wc-pending', 'wc-failed', 'wc-refunded');


-- =====================================================================
--  9: Retrieve the total revenue generated by a specific customer.
-- =====================================================================
SELECT
    cl.customer_id,
    cl.email AS user_email,
    SUM(o.total_amount) AS total_revenue
FROM
    wp_wc_customer_lookup cl
JOIN
    wp_wc_orders o ON (cl.user_id = o.customer_id AND cl.user_id IS NOT NULL)
                 OR (cl.user_id IS NULL AND cl.email = o.billing_email)
WHERE
    o.status IN ('wc-processing', 'wc-completed', 'wc-on-hold', 'wc-pending', 'wc-failed', 'wc-refunded')
    AND cl.customer_id = 2
GROUP BY
    cl.customer_id,
    cl.email;

-- =====================================================================
--  10: Retrieve the customer who has placed the highest total order value.
--  Aggregates revenue per customer and finds the top spender.
-- =====================================================================
SELECT
    cl.customer_id,
    cl.email AS user_email,
    SUM(o.total_amount) AS total_revenue
FROM
    wp_wc_customer_lookup cl
JOIN
    wp_wc_orders o ON (cl.user_id = o.customer_id AND cl.user_id IS NOT NULL)
                 OR (cl.user_id IS NULL AND cl.email = o.billing_email)
WHERE
    o.status IN ('wc-processing', 'wc-completed', 'wc-on-hold', 'wc-pending', 'wc-failed', 'wc-refunded')
GROUP BY
    cl.customer_id,
    cl.email
ORDER BY
    total_revenue DESC
LIMIT 1;
